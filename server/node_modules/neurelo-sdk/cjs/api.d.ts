/**
 * Neurelo API Spec
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import { type Configuration } from './configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import type { RequestArgs } from './base';
import { BaseAPI } from './base';
/**
 *
 * @export
 * @interface AffectedRowsOutput
 */
export interface AffectedRowsOutput {
    /**
     *
     * @type {number}
     * @memberof AffectedRowsOutput
     */
    'count'?: number;
}
/**
 *
 * @export
 * @interface AggregateByTask200Response
 */
export interface AggregateByTask200Response {
    /**
     *
     * @type {AggregateTask}
     * @memberof AggregateByTask200Response
     */
    'data': AggregateTask;
}
/**
 *
 * @export
 * @interface AggregateTask
 */
export interface AggregateTask {
    /**
     *
     * @type {TaskCountAggregateOutputType}
     * @memberof AggregateTask
     */
    '_count'?: TaskCountAggregateOutputType;
    /**
     *
     * @type {TaskMaxAggregateOutputType}
     * @memberof AggregateTask
     */
    '_max'?: TaskMaxAggregateOutputType;
    /**
     *
     * @type {TaskMinAggregateOutputType}
     * @memberof AggregateTask
     */
    '_min'?: TaskMinAggregateOutputType;
}
/**
 *
 * @export
 * @interface BoolFieldUpdateOperationsInput
 */
export interface BoolFieldUpdateOperationsInput {
    /**
     *
     * @type {boolean}
     * @memberof BoolFieldUpdateOperationsInput
     */
    'set'?: boolean;
}
/**
 *
 * @export
 * @interface BoolFilter
 */
export interface BoolFilter {
    /**
     *
     * @type {boolean}
     * @memberof BoolFilter
     */
    'eq'?: boolean;
    /**
     *
     * @type {boolean}
     * @memberof BoolFilter
     */
    'equals'?: boolean;
    /**
     *
     * @type {BoolFilterNot}
     * @memberof BoolFilter
     */
    'not'?: BoolFilterNot;
}
/**
 * @type BoolFilterNot
 * @export
 */
export type BoolFilterNot = NestedBoolFilter | boolean;
/**
 *
 * @export
 * @interface CreateManyTask201Response
 */
export interface CreateManyTask201Response {
    /**
     *
     * @type {AffectedRowsOutput}
     * @memberof CreateManyTask201Response
     */
    'data': AffectedRowsOutput;
}
/**
 *
 * @export
 * @interface CreateOneTask201Response
 */
export interface CreateOneTask201Response {
    /**
     *
     * @type {Task}
     * @memberof CreateOneTask201Response
     */
    'data': Task;
}
/**
 *
 * @export
 * @interface ErrorResponse
 */
export interface ErrorResponse {
    /**
     *
     * @type {object}
     * @memberof ErrorResponse
     */
    'details'?: object;
    /**
     *
     * @type {string}
     * @memberof ErrorResponse
     */
    'error': string;
}
/**
 *
 * @export
 * @interface FindTask200Response
 */
export interface FindTask200Response {
    /**
     *
     * @type {Array<Task>}
     * @memberof FindTask200Response
     */
    'data': Array<Task>;
}
/**
 *
 * @export
 * @interface FindTask400Response
 */
export interface FindTask400Response {
    /**
     *
     * @type {Array<ErrorResponse>}
     * @memberof FindTask400Response
     */
    'errors': Array<ErrorResponse>;
}
/**
 *
 * @export
 * @interface GroupByTask200Response
 */
export interface GroupByTask200Response {
    /**
     *
     * @type {Array<TaskGroupByOutputType>}
     * @memberof GroupByTask200Response
     */
    'data': Array<TaskGroupByOutputType>;
}
/**
 *
 * @export
 * @interface NestedBoolFilter
 */
export interface NestedBoolFilter {
    /**
     *
     * @type {boolean}
     * @memberof NestedBoolFilter
     */
    'eq'?: boolean;
    /**
     *
     * @type {boolean}
     * @memberof NestedBoolFilter
     */
    'equals'?: boolean;
    /**
     *
     * @type {BoolFilterNot}
     * @memberof NestedBoolFilter
     */
    'not'?: BoolFilterNot;
}
/**
 *
 * @export
 * @interface NestedIntFilter
 */
export interface NestedIntFilter {
    /**
     *
     * @type {number}
     * @memberof NestedIntFilter
     */
    'eq'?: number;
    /**
     *
     * @type {number}
     * @memberof NestedIntFilter
     */
    'equals'?: number;
    /**
     *
     * @type {number}
     * @memberof NestedIntFilter
     */
    'gt'?: number;
    /**
     *
     * @type {number}
     * @memberof NestedIntFilter
     */
    'gte'?: number;
    /**
     *
     * @type {Array<number>}
     * @memberof NestedIntFilter
     */
    'in'?: Array<number>;
    /**
     *
     * @type {number}
     * @memberof NestedIntFilter
     */
    'lt'?: number;
    /**
     *
     * @type {number}
     * @memberof NestedIntFilter
     */
    'lte'?: number;
    /**
     *
     * @type {NestedIntFilterNot}
     * @memberof NestedIntFilter
     */
    'not'?: NestedIntFilterNot;
    /**
     *
     * @type {Array<number>}
     * @memberof NestedIntFilter
     */
    'notIn'?: Array<number>;
}
/**
 * @type NestedIntFilterNot
 * @export
 */
export type NestedIntFilterNot = NestedIntFilter | number;
/**
 *
 * @export
 * @interface NestedStringFilter
 */
export interface NestedStringFilter {
    /**
     *
     * @type {string}
     * @memberof NestedStringFilter
     */
    'contains'?: string;
    /**
     *
     * @type {string}
     * @memberof NestedStringFilter
     */
    'endsWith'?: string;
    /**
     *
     * @type {string}
     * @memberof NestedStringFilter
     */
    'eq'?: string;
    /**
     *
     * @type {string}
     * @memberof NestedStringFilter
     */
    'equals'?: string;
    /**
     *
     * @type {string}
     * @memberof NestedStringFilter
     */
    'gt'?: string;
    /**
     *
     * @type {string}
     * @memberof NestedStringFilter
     */
    'gte'?: string;
    /**
     *
     * @type {Array<string>}
     * @memberof NestedStringFilter
     */
    'in'?: Array<string>;
    /**
     *
     * @type {string}
     * @memberof NestedStringFilter
     */
    'lt'?: string;
    /**
     *
     * @type {string}
     * @memberof NestedStringFilter
     */
    'lte'?: string;
    /**
     *
     * @type {NestedStringFilterNot}
     * @memberof NestedStringFilter
     */
    'not'?: NestedStringFilterNot;
    /**
     *
     * @type {Array<string>}
     * @memberof NestedStringFilter
     */
    'notIn'?: Array<string>;
    /**
     *
     * @type {string}
     * @memberof NestedStringFilter
     */
    'startsWith'?: string;
}
/**
 * @type NestedStringFilterNot
 * @export
 */
export type NestedStringFilterNot = NestedStringFilter | string;
/**
 *
 * @export
 * @interface NestedStringWithAggregatesFilter
 */
export interface NestedStringWithAggregatesFilter {
    /**
     *
     * @type {NestedIntFilter}
     * @memberof NestedStringWithAggregatesFilter
     */
    '_count'?: NestedIntFilter;
    /**
     *
     * @type {NestedStringFilter}
     * @memberof NestedStringWithAggregatesFilter
     */
    '_max'?: NestedStringFilter;
    /**
     *
     * @type {NestedStringFilter}
     * @memberof NestedStringWithAggregatesFilter
     */
    '_min'?: NestedStringFilter;
    /**
     *
     * @type {string}
     * @memberof NestedStringWithAggregatesFilter
     */
    'contains'?: string;
    /**
     *
     * @type {string}
     * @memberof NestedStringWithAggregatesFilter
     */
    'endsWith'?: string;
    /**
     *
     * @type {string}
     * @memberof NestedStringWithAggregatesFilter
     */
    'eq'?: string;
    /**
     *
     * @type {string}
     * @memberof NestedStringWithAggregatesFilter
     */
    'equals'?: string;
    /**
     *
     * @type {string}
     * @memberof NestedStringWithAggregatesFilter
     */
    'gt'?: string;
    /**
     *
     * @type {string}
     * @memberof NestedStringWithAggregatesFilter
     */
    'gte'?: string;
    /**
     *
     * @type {Array<string>}
     * @memberof NestedStringWithAggregatesFilter
     */
    'in'?: Array<string>;
    /**
     *
     * @type {string}
     * @memberof NestedStringWithAggregatesFilter
     */
    'lt'?: string;
    /**
     *
     * @type {string}
     * @memberof NestedStringWithAggregatesFilter
     */
    'lte'?: string;
    /**
     *
     * @type {NestedStringWithAggregatesFilterNot}
     * @memberof NestedStringWithAggregatesFilter
     */
    'not'?: NestedStringWithAggregatesFilterNot;
    /**
     *
     * @type {Array<string>}
     * @memberof NestedStringWithAggregatesFilter
     */
    'notIn'?: Array<string>;
    /**
     *
     * @type {string}
     * @memberof NestedStringWithAggregatesFilter
     */
    'startsWith'?: string;
}
/**
 * @type NestedStringWithAggregatesFilterNot
 * @export
 */
export type NestedStringWithAggregatesFilterNot = NestedStringWithAggregatesFilter | string;
/**
 *
 * @export
 * @enum {string}
 */
export declare const QueryMode: {
    readonly Default: "default";
    readonly Insensitive: "insensitive";
};
export type QueryMode = typeof QueryMode[keyof typeof QueryMode];
/**
 *
 * @export
 * @enum {string}
 */
export declare const SortOrder: {
    readonly Asc: "asc";
    readonly Desc: "desc";
};
export type SortOrder = typeof SortOrder[keyof typeof SortOrder];
/**
 *
 * @export
 * @interface StringFieldUpdateOperationsInput
 */
export interface StringFieldUpdateOperationsInput {
    /**
     *
     * @type {string}
     * @memberof StringFieldUpdateOperationsInput
     */
    'set'?: string;
}
/**
 *
 * @export
 * @interface StringFilter
 */
export interface StringFilter {
    /**
     *
     * @type {string}
     * @memberof StringFilter
     */
    'contains'?: string;
    /**
     *
     * @type {string}
     * @memberof StringFilter
     */
    'endsWith'?: string;
    /**
     *
     * @type {string}
     * @memberof StringFilter
     */
    'eq'?: string;
    /**
     *
     * @type {string}
     * @memberof StringFilter
     */
    'equals'?: string;
    /**
     *
     * @type {string}
     * @memberof StringFilter
     */
    'gt'?: string;
    /**
     *
     * @type {string}
     * @memberof StringFilter
     */
    'gte'?: string;
    /**
     *
     * @type {Array<string>}
     * @memberof StringFilter
     */
    'in'?: Array<string>;
    /**
     *
     * @type {string}
     * @memberof StringFilter
     */
    'lt'?: string;
    /**
     *
     * @type {string}
     * @memberof StringFilter
     */
    'lte'?: string;
    /**
     *
     * @type {QueryMode}
     * @memberof StringFilter
     */
    'mode'?: QueryMode;
    /**
     *
     * @type {NestedStringFilterNot}
     * @memberof StringFilter
     */
    'not'?: NestedStringFilterNot;
    /**
     *
     * @type {Array<string>}
     * @memberof StringFilter
     */
    'notIn'?: Array<string>;
    /**
     *
     * @type {string}
     * @memberof StringFilter
     */
    'startsWith'?: string;
}
/**
 *
 * @export
 * @interface StringWithAggregatesFilter
 */
export interface StringWithAggregatesFilter {
    /**
     *
     * @type {NestedIntFilter}
     * @memberof StringWithAggregatesFilter
     */
    '_count'?: NestedIntFilter;
    /**
     *
     * @type {NestedStringFilter}
     * @memberof StringWithAggregatesFilter
     */
    '_max'?: NestedStringFilter;
    /**
     *
     * @type {NestedStringFilter}
     * @memberof StringWithAggregatesFilter
     */
    '_min'?: NestedStringFilter;
    /**
     *
     * @type {string}
     * @memberof StringWithAggregatesFilter
     */
    'contains'?: string;
    /**
     *
     * @type {string}
     * @memberof StringWithAggregatesFilter
     */
    'endsWith'?: string;
    /**
     *
     * @type {string}
     * @memberof StringWithAggregatesFilter
     */
    'eq'?: string;
    /**
     *
     * @type {string}
     * @memberof StringWithAggregatesFilter
     */
    'equals'?: string;
    /**
     *
     * @type {string}
     * @memberof StringWithAggregatesFilter
     */
    'gt'?: string;
    /**
     *
     * @type {string}
     * @memberof StringWithAggregatesFilter
     */
    'gte'?: string;
    /**
     *
     * @type {Array<string>}
     * @memberof StringWithAggregatesFilter
     */
    'in'?: Array<string>;
    /**
     *
     * @type {string}
     * @memberof StringWithAggregatesFilter
     */
    'lt'?: string;
    /**
     *
     * @type {string}
     * @memberof StringWithAggregatesFilter
     */
    'lte'?: string;
    /**
     *
     * @type {QueryMode}
     * @memberof StringWithAggregatesFilter
     */
    'mode'?: QueryMode;
    /**
     *
     * @type {NestedStringWithAggregatesFilterNot}
     * @memberof StringWithAggregatesFilter
     */
    'not'?: NestedStringWithAggregatesFilterNot;
    /**
     *
     * @type {Array<string>}
     * @memberof StringWithAggregatesFilter
     */
    'notIn'?: Array<string>;
    /**
     *
     * @type {string}
     * @memberof StringWithAggregatesFilter
     */
    'startsWith'?: string;
}
/**
 *
 * @export
 * @interface Task
 */
export interface Task {
    /**
     *
     * @type {string}
     * @memberof Task
     */
    'id'?: string;
    /**
     *
     * @type {Array<TaskItem>}
     * @memberof Task
     */
    'items'?: Array<TaskItem> | null;
    /**
     *
     * @type {string}
     * @memberof Task
     */
    'name'?: string;
}
/**
 *
 * @export
 * @interface TaskAggregateInput
 */
export interface TaskAggregateInput {
    /**
     *
     * @type {Array<string>}
     * @memberof TaskAggregateInput
     */
    '_count'?: Array<TaskAggregateInputCountEnum>;
    /**
     *
     * @type {Array<string>}
     * @memberof TaskAggregateInput
     */
    '_max'?: Array<TaskAggregateInputMaxEnum>;
    /**
     *
     * @type {Array<string>}
     * @memberof TaskAggregateInput
     */
    '_min'?: Array<TaskAggregateInputMinEnum>;
}
export declare const TaskAggregateInputCountEnum: {
    readonly All: "_all";
    readonly Id: "id";
    readonly Name: "name";
};
export type TaskAggregateInputCountEnum = typeof TaskAggregateInputCountEnum[keyof typeof TaskAggregateInputCountEnum];
export declare const TaskAggregateInputMaxEnum: {
    readonly Id: "id";
    readonly Name: "name";
};
export type TaskAggregateInputMaxEnum = typeof TaskAggregateInputMaxEnum[keyof typeof TaskAggregateInputMaxEnum];
export declare const TaskAggregateInputMinEnum: {
    readonly Id: "id";
    readonly Name: "name";
};
export type TaskAggregateInputMinEnum = typeof TaskAggregateInputMinEnum[keyof typeof TaskAggregateInputMinEnum];
/**
 *
 * @export
 * @interface TaskCountAggregateOutputType
 */
export interface TaskCountAggregateOutputType {
    /**
     *
     * @type {number}
     * @memberof TaskCountAggregateOutputType
     */
    '_all'?: number;
    /**
     *
     * @type {number}
     * @memberof TaskCountAggregateOutputType
     */
    'id'?: number;
    /**
     *
     * @type {number}
     * @memberof TaskCountAggregateOutputType
     */
    'name'?: number;
}
/**
 *
 * @export
 * @interface TaskCountOrderByAggregateInput
 */
export interface TaskCountOrderByAggregateInput {
    /**
     *
     * @type {SortOrder}
     * @memberof TaskCountOrderByAggregateInput
     */
    'id'?: SortOrder;
    /**
     *
     * @type {SortOrder}
     * @memberof TaskCountOrderByAggregateInput
     */
    'name'?: SortOrder;
}
/**
 *
 * @export
 * @interface TaskCreateInput
 */
export interface TaskCreateInput {
    /**
     *
     * @type {string}
     * @memberof TaskCreateInput
     */
    'id'?: string;
    /**
     *
     * @type {TaskCreateInputItems}
     * @memberof TaskCreateInput
     */
    'items'?: TaskCreateInputItems;
    /**
     *
     * @type {string}
     * @memberof TaskCreateInput
     */
    'name'?: string;
}
/**
 * @type TaskCreateInputItems
 * @export
 */
export type TaskCreateInputItems = Array<TaskItemCreateInput> | TaskItemCreateInput | TaskItemListCreateEnvelopeInput;
/**
 *
 * @export
 * @interface TaskCreateManyInput
 */
export interface TaskCreateManyInput {
    /**
     *
     * @type {string}
     * @memberof TaskCreateManyInput
     */
    'id'?: string;
    /**
     *
     * @type {TaskCreateInputItems}
     * @memberof TaskCreateManyInput
     */
    'items'?: TaskCreateInputItems;
    /**
     *
     * @type {string}
     * @memberof TaskCreateManyInput
     */
    'name'?: string;
}
/**
 *
 * @export
 * @interface TaskGroupByInput
 */
export interface TaskGroupByInput {
    /**
     *
     * @type {Array<string>}
     * @memberof TaskGroupByInput
     */
    '_count'?: Array<TaskGroupByInputCountEnum>;
    /**
     *
     * @type {Array<string>}
     * @memberof TaskGroupByInput
     */
    '_max'?: Array<TaskGroupByInputMaxEnum>;
    /**
     *
     * @type {Array<string>}
     * @memberof TaskGroupByInput
     */
    '_min'?: Array<TaskGroupByInputMinEnum>;
    /**
     *
     * @type {boolean}
     * @memberof TaskGroupByInput
     */
    'id'?: boolean;
    /**
     *
     * @type {boolean}
     * @memberof TaskGroupByInput
     */
    'name'?: boolean;
}
export declare const TaskGroupByInputCountEnum: {
    readonly All: "_all";
    readonly Id: "id";
    readonly Name: "name";
};
export type TaskGroupByInputCountEnum = typeof TaskGroupByInputCountEnum[keyof typeof TaskGroupByInputCountEnum];
export declare const TaskGroupByInputMaxEnum: {
    readonly Id: "id";
    readonly Name: "name";
};
export type TaskGroupByInputMaxEnum = typeof TaskGroupByInputMaxEnum[keyof typeof TaskGroupByInputMaxEnum];
export declare const TaskGroupByInputMinEnum: {
    readonly Id: "id";
    readonly Name: "name";
};
export type TaskGroupByInputMinEnum = typeof TaskGroupByInputMinEnum[keyof typeof TaskGroupByInputMinEnum];
/**
 *
 * @export
 * @interface TaskGroupByOutputType
 */
export interface TaskGroupByOutputType {
    /**
     *
     * @type {TaskCountAggregateOutputType}
     * @memberof TaskGroupByOutputType
     */
    '_count'?: TaskCountAggregateOutputType;
    /**
     *
     * @type {TaskMaxAggregateOutputType}
     * @memberof TaskGroupByOutputType
     */
    '_max'?: TaskMaxAggregateOutputType;
    /**
     *
     * @type {TaskMinAggregateOutputType}
     * @memberof TaskGroupByOutputType
     */
    '_min'?: TaskMinAggregateOutputType;
    /**
     *
     * @type {string}
     * @memberof TaskGroupByOutputType
     */
    'id'?: string;
    /**
     *
     * @type {string}
     * @memberof TaskGroupByOutputType
     */
    'name'?: string;
}
/**
 *
 * @export
 * @interface TaskItem
 */
export interface TaskItem {
    /**
     *
     * @type {boolean}
     * @memberof TaskItem
     */
    'completed'?: boolean;
    /**
     *
     * @type {string}
     * @memberof TaskItem
     */
    'name'?: string;
}
/**
 *
 * @export
 * @interface TaskItemCompositeListFilter
 */
export interface TaskItemCompositeListFilter {
    /**
     *
     * @type {TaskItemCompositeListFilterEq}
     * @memberof TaskItemCompositeListFilter
     */
    'eq'?: TaskItemCompositeListFilterEq;
    /**
     *
     * @type {TaskItemCompositeListFilterEq}
     * @memberof TaskItemCompositeListFilter
     */
    'equals'?: TaskItemCompositeListFilterEq;
    /**
     *
     * @type {TaskItemWhereInput}
     * @memberof TaskItemCompositeListFilter
     */
    'every'?: TaskItemWhereInput;
    /**
     *
     * @type {boolean}
     * @memberof TaskItemCompositeListFilter
     */
    'isEmpty'?: boolean;
    /**
     *
     * @type {boolean}
     * @memberof TaskItemCompositeListFilter
     */
    'isSet'?: boolean;
    /**
     *
     * @type {TaskItemWhereInput}
     * @memberof TaskItemCompositeListFilter
     */
    'none'?: TaskItemWhereInput;
    /**
     *
     * @type {TaskItemWhereInput}
     * @memberof TaskItemCompositeListFilter
     */
    'some'?: TaskItemWhereInput;
}
/**
 * @type TaskItemCompositeListFilterEq
 * @export
 */
export type TaskItemCompositeListFilterEq = Array<TaskItemObjectEqualityInput> | TaskItemObjectEqualityInput;
/**
 *
 * @export
 * @interface TaskItemCreateInput
 */
export interface TaskItemCreateInput {
    /**
     *
     * @type {boolean}
     * @memberof TaskItemCreateInput
     */
    'completed'?: boolean;
    /**
     *
     * @type {string}
     * @memberof TaskItemCreateInput
     */
    'name'?: string;
}
/**
 *
 * @export
 * @interface TaskItemDeleteManyInput
 */
export interface TaskItemDeleteManyInput {
    /**
     *
     * @type {TaskItemWhereInput}
     * @memberof TaskItemDeleteManyInput
     */
    'where': TaskItemWhereInput;
}
/**
 *
 * @export
 * @interface TaskItemListCreateEnvelopeInput
 */
export interface TaskItemListCreateEnvelopeInput {
    /**
     *
     * @type {TaskItemListCreateEnvelopeInputSet}
     * @memberof TaskItemListCreateEnvelopeInput
     */
    'set'?: TaskItemListCreateEnvelopeInputSet;
}
/**
 * @type TaskItemListCreateEnvelopeInputSet
 * @export
 */
export type TaskItemListCreateEnvelopeInputSet = Array<TaskItemCreateInput> | TaskItemCreateInput;
/**
 *
 * @export
 * @interface TaskItemListUpdateEnvelopeInput
 */
export interface TaskItemListUpdateEnvelopeInput {
    /**
     *
     * @type {TaskItemDeleteManyInput}
     * @memberof TaskItemListUpdateEnvelopeInput
     */
    'deleteMany'?: TaskItemDeleteManyInput;
    /**
     *
     * @type {TaskItemListCreateEnvelopeInputSet}
     * @memberof TaskItemListUpdateEnvelopeInput
     */
    'push'?: TaskItemListCreateEnvelopeInputSet;
    /**
     *
     * @type {TaskItemListCreateEnvelopeInputSet}
     * @memberof TaskItemListUpdateEnvelopeInput
     */
    'set'?: TaskItemListCreateEnvelopeInputSet;
    /**
     *
     * @type {TaskItemUpdateManyInput}
     * @memberof TaskItemListUpdateEnvelopeInput
     */
    'updateMany'?: TaskItemUpdateManyInput;
}
/**
 *
 * @export
 * @interface TaskItemObjectEqualityInput
 */
export interface TaskItemObjectEqualityInput {
    /**
     *
     * @type {boolean}
     * @memberof TaskItemObjectEqualityInput
     */
    'completed': boolean;
    /**
     *
     * @type {string}
     * @memberof TaskItemObjectEqualityInput
     */
    'name': string;
}
/**
 *
 * @export
 * @interface TaskItemOrderByCompositeAggregateInput
 */
export interface TaskItemOrderByCompositeAggregateInput {
    /**
     *
     * @type {SortOrder}
     * @memberof TaskItemOrderByCompositeAggregateInput
     */
    '_count'?: SortOrder;
}
/**
 *
 * @export
 * @interface TaskItemSelectInput
 */
export interface TaskItemSelectInput {
    /**
     *
     * @type {boolean}
     * @memberof TaskItemSelectInput
     */
    '$scalars'?: boolean;
    /**
     *
     * @type {boolean}
     * @memberof TaskItemSelectInput
     */
    'completed'?: boolean;
    /**
     *
     * @type {boolean}
     * @memberof TaskItemSelectInput
     */
    'name'?: boolean;
}
/**
 *
 * @export
 * @interface TaskItemUpdateInput
 */
export interface TaskItemUpdateInput {
    /**
     *
     * @type {TaskItemUpdateInputCompleted}
     * @memberof TaskItemUpdateInput
     */
    'completed'?: TaskItemUpdateInputCompleted;
    /**
     *
     * @type {TaskUpdateInputName}
     * @memberof TaskItemUpdateInput
     */
    'name'?: TaskUpdateInputName;
}
/**
 * @type TaskItemUpdateInputCompleted
 * @export
 */
export type TaskItemUpdateInputCompleted = BoolFieldUpdateOperationsInput | boolean;
/**
 *
 * @export
 * @interface TaskItemUpdateManyInput
 */
export interface TaskItemUpdateManyInput {
    /**
     *
     * @type {TaskItemUpdateInput}
     * @memberof TaskItemUpdateManyInput
     */
    'data': TaskItemUpdateInput;
    /**
     *
     * @type {TaskItemWhereInput}
     * @memberof TaskItemUpdateManyInput
     */
    'where': TaskItemWhereInput;
}
/**
 *
 * @export
 * @interface TaskItemWhereInput
 */
export interface TaskItemWhereInput {
    /**
     *
     * @type {TaskItemWhereInputAND}
     * @memberof TaskItemWhereInput
     */
    'AND'?: TaskItemWhereInputAND;
    /**
     *
     * @type {TaskItemWhereInputAND}
     * @memberof TaskItemWhereInput
     */
    'NOT'?: TaskItemWhereInputAND;
    /**
     *
     * @type {Array<TaskItemWhereInput>}
     * @memberof TaskItemWhereInput
     */
    'OR'?: Array<TaskItemWhereInput>;
    /**
     *
     * @type {TaskItemWhereInputCompleted}
     * @memberof TaskItemWhereInput
     */
    'completed'?: TaskItemWhereInputCompleted;
    /**
     *
     * @type {TaskWhereInputId}
     * @memberof TaskItemWhereInput
     */
    'name'?: TaskWhereInputId;
}
/**
 * @type TaskItemWhereInputAND
 * @export
 */
export type TaskItemWhereInputAND = Array<TaskItemWhereInput> | TaskItemWhereInput;
/**
 * @type TaskItemWhereInputCompleted
 * @export
 */
export type TaskItemWhereInputCompleted = BoolFilter | boolean;
/**
 *
 * @export
 * @interface TaskMaxAggregateOutputType
 */
export interface TaskMaxAggregateOutputType {
    /**
     *
     * @type {string}
     * @memberof TaskMaxAggregateOutputType
     */
    'id'?: string | null;
    /**
     *
     * @type {string}
     * @memberof TaskMaxAggregateOutputType
     */
    'name'?: string | null;
}
/**
 *
 * @export
 * @interface TaskMaxOrderByAggregateInput
 */
export interface TaskMaxOrderByAggregateInput {
    /**
     *
     * @type {SortOrder}
     * @memberof TaskMaxOrderByAggregateInput
     */
    'id'?: SortOrder;
    /**
     *
     * @type {SortOrder}
     * @memberof TaskMaxOrderByAggregateInput
     */
    'name'?: SortOrder;
}
/**
 *
 * @export
 * @interface TaskMinAggregateOutputType
 */
export interface TaskMinAggregateOutputType {
    /**
     *
     * @type {string}
     * @memberof TaskMinAggregateOutputType
     */
    'id'?: string | null;
    /**
     *
     * @type {string}
     * @memberof TaskMinAggregateOutputType
     */
    'name'?: string | null;
}
/**
 *
 * @export
 * @interface TaskMinOrderByAggregateInput
 */
export interface TaskMinOrderByAggregateInput {
    /**
     *
     * @type {SortOrder}
     * @memberof TaskMinOrderByAggregateInput
     */
    'id'?: SortOrder;
    /**
     *
     * @type {SortOrder}
     * @memberof TaskMinOrderByAggregateInput
     */
    'name'?: SortOrder;
}
/**
 *
 * @export
 * @interface TaskOrderByWithAggregationInput
 */
export interface TaskOrderByWithAggregationInput {
    /**
     *
     * @type {TaskCountOrderByAggregateInput}
     * @memberof TaskOrderByWithAggregationInput
     */
    '_count'?: TaskCountOrderByAggregateInput;
    /**
     *
     * @type {TaskMaxOrderByAggregateInput}
     * @memberof TaskOrderByWithAggregationInput
     */
    '_max'?: TaskMaxOrderByAggregateInput;
    /**
     *
     * @type {TaskMinOrderByAggregateInput}
     * @memberof TaskOrderByWithAggregationInput
     */
    '_min'?: TaskMinOrderByAggregateInput;
    /**
     *
     * @type {SortOrder}
     * @memberof TaskOrderByWithAggregationInput
     */
    'id'?: SortOrder;
    /**
     *
     * @type {SortOrder}
     * @memberof TaskOrderByWithAggregationInput
     */
    'name'?: SortOrder;
}
/**
 *
 * @export
 * @interface TaskOrderByWithRelationInput
 */
export interface TaskOrderByWithRelationInput {
    /**
     *
     * @type {SortOrder}
     * @memberof TaskOrderByWithRelationInput
     */
    'id'?: SortOrder;
    /**
     *
     * @type {TaskItemOrderByCompositeAggregateInput}
     * @memberof TaskOrderByWithRelationInput
     */
    'items'?: TaskItemOrderByCompositeAggregateInput;
    /**
     *
     * @type {SortOrder}
     * @memberof TaskOrderByWithRelationInput
     */
    'name'?: SortOrder;
}
/**
 *
 * @export
 * @enum {string}
 */
export declare const TaskScalarFieldEnum: {
    readonly Id: "id";
    readonly Name: "name";
};
export type TaskScalarFieldEnum = typeof TaskScalarFieldEnum[keyof typeof TaskScalarFieldEnum];
/**
 *
 * @export
 * @interface TaskScalarWhereWithAggregatesInput
 */
export interface TaskScalarWhereWithAggregatesInput {
    /**
     *
     * @type {TaskScalarWhereWithAggregatesInputAND}
     * @memberof TaskScalarWhereWithAggregatesInput
     */
    'AND'?: TaskScalarWhereWithAggregatesInputAND;
    /**
     *
     * @type {TaskScalarWhereWithAggregatesInputAND}
     * @memberof TaskScalarWhereWithAggregatesInput
     */
    'NOT'?: TaskScalarWhereWithAggregatesInputAND;
    /**
     *
     * @type {Array<TaskScalarWhereWithAggregatesInput>}
     * @memberof TaskScalarWhereWithAggregatesInput
     */
    'OR'?: Array<TaskScalarWhereWithAggregatesInput>;
    /**
     *
     * @type {TaskScalarWhereWithAggregatesInputId}
     * @memberof TaskScalarWhereWithAggregatesInput
     */
    'id'?: TaskScalarWhereWithAggregatesInputId;
    /**
     *
     * @type {TaskScalarWhereWithAggregatesInputId}
     * @memberof TaskScalarWhereWithAggregatesInput
     */
    'name'?: TaskScalarWhereWithAggregatesInputId;
}
/**
 * @type TaskScalarWhereWithAggregatesInputAND
 * @export
 */
export type TaskScalarWhereWithAggregatesInputAND = Array<TaskScalarWhereWithAggregatesInput> | TaskScalarWhereWithAggregatesInput;
/**
 * @type TaskScalarWhereWithAggregatesInputId
 * @export
 */
export type TaskScalarWhereWithAggregatesInputId = StringWithAggregatesFilter | string;
/**
 *
 * @export
 * @interface TaskSelectInput
 */
export interface TaskSelectInput {
    /**
     *
     * @type {boolean}
     * @memberof TaskSelectInput
     */
    '$innerObjects'?: boolean;
    /**
     *
     * @type {boolean}
     * @memberof TaskSelectInput
     */
    '$related'?: boolean;
    /**
     *
     * @type {boolean}
     * @memberof TaskSelectInput
     */
    '$scalars'?: boolean;
    /**
     *
     * @type {boolean}
     * @memberof TaskSelectInput
     */
    'id'?: boolean;
    /**
     *
     * @type {TaskSelectInputItems}
     * @memberof TaskSelectInput
     */
    'items'?: TaskSelectInputItems;
    /**
     *
     * @type {boolean}
     * @memberof TaskSelectInput
     */
    'name'?: boolean;
}
/**
 * @type TaskSelectInputItems
 * @export
 */
export type TaskSelectInputItems = TaskItemSelectInput | boolean;
/**
 *
 * @export
 * @interface TaskUpdateInput
 */
export interface TaskUpdateInput {
    /**
     *
     * @type {TaskUpdateInputItems}
     * @memberof TaskUpdateInput
     */
    'items'?: TaskUpdateInputItems;
    /**
     *
     * @type {TaskUpdateInputName}
     * @memberof TaskUpdateInput
     */
    'name'?: TaskUpdateInputName;
}
/**
 * @type TaskUpdateInputItems
 * @export
 */
export type TaskUpdateInputItems = Array<TaskItemCreateInput> | TaskItemCreateInput | TaskItemListUpdateEnvelopeInput;
/**
 * @type TaskUpdateInputName
 * @export
 */
export type TaskUpdateInputName = StringFieldUpdateOperationsInput | string;
/**
 *
 * @export
 * @interface TaskUpdateManyInput
 */
export interface TaskUpdateManyInput {
    /**
     *
     * @type {TaskUpdateInputItems}
     * @memberof TaskUpdateManyInput
     */
    'items'?: TaskUpdateInputItems;
    /**
     *
     * @type {TaskUpdateInputName}
     * @memberof TaskUpdateManyInput
     */
    'name'?: TaskUpdateInputName;
}
/**
 *
 * @export
 * @interface TaskWhereInput
 */
export interface TaskWhereInput {
    /**
     *
     * @type {TaskWhereInputAND}
     * @memberof TaskWhereInput
     */
    'AND'?: TaskWhereInputAND;
    /**
     *
     * @type {TaskWhereInputAND}
     * @memberof TaskWhereInput
     */
    'NOT'?: TaskWhereInputAND;
    /**
     *
     * @type {Array<TaskWhereInput>}
     * @memberof TaskWhereInput
     */
    'OR'?: Array<TaskWhereInput>;
    /**
     *
     * @type {TaskWhereInputId}
     * @memberof TaskWhereInput
     */
    'id'?: TaskWhereInputId;
    /**
     *
     * @type {TaskWhereInputItems}
     * @memberof TaskWhereInput
     */
    'items'?: TaskWhereInputItems;
    /**
     *
     * @type {TaskWhereInputId}
     * @memberof TaskWhereInput
     */
    'name'?: TaskWhereInputId;
}
/**
 * @type TaskWhereInputAND
 * @export
 */
export type TaskWhereInputAND = Array<TaskWhereInput> | TaskWhereInput;
/**
 * @type TaskWhereInputId
 * @export
 */
export type TaskWhereInputId = StringFilter | string;
/**
 * @type TaskWhereInputItems
 * @export
 */
export type TaskWhereInputItems = Array<TaskItemObjectEqualityInput> | TaskItemCompositeListFilter | TaskItemObjectEqualityInput;
/**
 *
 * @export
 * @interface TaskWhereUniqueInput
 */
export interface TaskWhereUniqueInput {
    /**
     *
     * @type {string}
     * @memberof TaskWhereUniqueInput
     */
    'id'?: string;
}
/**
 * TaskApi - axios parameter creator
 * @export
 */
export declare const TaskApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     * Aggregate by Task
     * @param {TaskAggregateInput} select
     * @param {TaskWhereInput} [filter]
     * @param {Array<TaskOrderByWithRelationInput>} [orderBy]
     * @param {number} [skip]
     * @param {number} [take]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    aggregateByTask: (select: TaskAggregateInput, filter?: TaskWhereInput, orderBy?: Array<TaskOrderByWithRelationInput>, skip?: number, take?: number, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Create multiple Task records
     * @param {Array<TaskCreateManyInput>} taskCreateManyInput
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createManyTask: (taskCreateManyInput: Array<TaskCreateManyInput>, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Create one Task record
     * @param {TaskCreateInput} taskCreateInput
     * @param {TaskSelectInput} [select]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createOneTask: (taskCreateInput: TaskCreateInput, select?: TaskSelectInput, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Delete multiple Task records
     * @param {TaskWhereInput} [filter]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteTask: (filter?: TaskWhereInput, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Delete one Task record by id
     * @param {string} value
     * @param {TaskSelectInput} [select]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteTaskById: (value: string, select?: TaskSelectInput, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Retrieve multiple Task records
     * @param {TaskSelectInput} [select]
     * @param {TaskWhereInput} [filter]
     * @param {Array<TaskOrderByWithRelationInput>} [orderBy]
     * @param {number} [skip]
     * @param {number} [take]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    findTask: (select?: TaskSelectInput, filter?: TaskWhereInput, orderBy?: Array<TaskOrderByWithRelationInput>, skip?: number, take?: number, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Find one Task record by id
     * @param {string} value
     * @param {TaskSelectInput} [select]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    findTaskById: (value: string, select?: TaskSelectInput, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Group by Task
     * @param {TaskGroupByInput} select
     * @param {TaskWhereInput} [filter]
     * @param {Array<TaskOrderByWithAggregationInput>} [orderBy]
     * @param {Array<TaskScalarFieldEnum>} [groupBy]
     * @param {TaskScalarWhereWithAggregatesInput} [having]
     * @param {number} [skip]
     * @param {number} [take]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    groupByTask: (select: TaskGroupByInput, filter?: TaskWhereInput, orderBy?: Array<TaskOrderByWithAggregationInput>, groupBy?: Array<TaskScalarFieldEnum>, having?: TaskScalarWhereWithAggregatesInput, skip?: number, take?: number, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Update multiple Task records
     * @param {TaskUpdateManyInput} taskUpdateManyInput
     * @param {TaskWhereInput} [filter]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateTask: (taskUpdateManyInput: TaskUpdateManyInput, filter?: TaskWhereInput, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Update one Task record by id
     * @param {string} value
     * @param {TaskUpdateInput} taskUpdateInput
     * @param {TaskSelectInput} [select]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateTaskById: (value: string, taskUpdateInput: TaskUpdateInput, select?: TaskSelectInput, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
};
/**
 * TaskApi - functional programming interface
 * @export
 */
export declare const TaskApiFp: (configuration?: Configuration) => {
    /**
     * Aggregate by Task
     * @param {TaskAggregateInput} select
     * @param {TaskWhereInput} [filter]
     * @param {Array<TaskOrderByWithRelationInput>} [orderBy]
     * @param {number} [skip]
     * @param {number} [take]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    aggregateByTask(select: TaskAggregateInput, filter?: TaskWhereInput, orderBy?: Array<TaskOrderByWithRelationInput>, skip?: number, take?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AggregateByTask200Response>>;
    /**
     * Create multiple Task records
     * @param {Array<TaskCreateManyInput>} taskCreateManyInput
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createManyTask(taskCreateManyInput: Array<TaskCreateManyInput>, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CreateManyTask201Response>>;
    /**
     * Create one Task record
     * @param {TaskCreateInput} taskCreateInput
     * @param {TaskSelectInput} [select]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createOneTask(taskCreateInput: TaskCreateInput, select?: TaskSelectInput, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CreateOneTask201Response>>;
    /**
     * Delete multiple Task records
     * @param {TaskWhereInput} [filter]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteTask(filter?: TaskWhereInput, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CreateManyTask201Response>>;
    /**
     * Delete one Task record by id
     * @param {string} value
     * @param {TaskSelectInput} [select]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteTaskById(value: string, select?: TaskSelectInput, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CreateOneTask201Response>>;
    /**
     * Retrieve multiple Task records
     * @param {TaskSelectInput} [select]
     * @param {TaskWhereInput} [filter]
     * @param {Array<TaskOrderByWithRelationInput>} [orderBy]
     * @param {number} [skip]
     * @param {number} [take]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    findTask(select?: TaskSelectInput, filter?: TaskWhereInput, orderBy?: Array<TaskOrderByWithRelationInput>, skip?: number, take?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<FindTask200Response>>;
    /**
     * Find one Task record by id
     * @param {string} value
     * @param {TaskSelectInput} [select]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    findTaskById(value: string, select?: TaskSelectInput, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CreateOneTask201Response>>;
    /**
     * Group by Task
     * @param {TaskGroupByInput} select
     * @param {TaskWhereInput} [filter]
     * @param {Array<TaskOrderByWithAggregationInput>} [orderBy]
     * @param {Array<TaskScalarFieldEnum>} [groupBy]
     * @param {TaskScalarWhereWithAggregatesInput} [having]
     * @param {number} [skip]
     * @param {number} [take]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    groupByTask(select: TaskGroupByInput, filter?: TaskWhereInput, orderBy?: Array<TaskOrderByWithAggregationInput>, groupBy?: Array<TaskScalarFieldEnum>, having?: TaskScalarWhereWithAggregatesInput, skip?: number, take?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GroupByTask200Response>>;
    /**
     * Update multiple Task records
     * @param {TaskUpdateManyInput} taskUpdateManyInput
     * @param {TaskWhereInput} [filter]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateTask(taskUpdateManyInput: TaskUpdateManyInput, filter?: TaskWhereInput, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CreateManyTask201Response>>;
    /**
     * Update one Task record by id
     * @param {string} value
     * @param {TaskUpdateInput} taskUpdateInput
     * @param {TaskSelectInput} [select]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateTaskById(value: string, taskUpdateInput: TaskUpdateInput, select?: TaskSelectInput, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CreateOneTask201Response>>;
};
/**
 * TaskApi - factory interface
 * @export
 */
export declare const TaskApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     * Aggregate by Task
     * @param {TaskAggregateInput} select
     * @param {TaskWhereInput} [filter]
     * @param {Array<TaskOrderByWithRelationInput>} [orderBy]
     * @param {number} [skip]
     * @param {number} [take]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    aggregateByTask(select: TaskAggregateInput, filter?: TaskWhereInput, orderBy?: Array<TaskOrderByWithRelationInput>, skip?: number, take?: number, options?: any): AxiosPromise<AggregateByTask200Response>;
    /**
     * Create multiple Task records
     * @param {Array<TaskCreateManyInput>} taskCreateManyInput
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createManyTask(taskCreateManyInput: Array<TaskCreateManyInput>, options?: any): AxiosPromise<CreateManyTask201Response>;
    /**
     * Create one Task record
     * @param {TaskCreateInput} taskCreateInput
     * @param {TaskSelectInput} [select]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createOneTask(taskCreateInput: TaskCreateInput, select?: TaskSelectInput, options?: any): AxiosPromise<CreateOneTask201Response>;
    /**
     * Delete multiple Task records
     * @param {TaskWhereInput} [filter]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteTask(filter?: TaskWhereInput, options?: any): AxiosPromise<CreateManyTask201Response>;
    /**
     * Delete one Task record by id
     * @param {string} value
     * @param {TaskSelectInput} [select]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteTaskById(value: string, select?: TaskSelectInput, options?: any): AxiosPromise<CreateOneTask201Response>;
    /**
     * Retrieve multiple Task records
     * @param {TaskSelectInput} [select]
     * @param {TaskWhereInput} [filter]
     * @param {Array<TaskOrderByWithRelationInput>} [orderBy]
     * @param {number} [skip]
     * @param {number} [take]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    findTask(select?: TaskSelectInput, filter?: TaskWhereInput, orderBy?: Array<TaskOrderByWithRelationInput>, skip?: number, take?: number, options?: any): AxiosPromise<FindTask200Response>;
    /**
     * Find one Task record by id
     * @param {string} value
     * @param {TaskSelectInput} [select]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    findTaskById(value: string, select?: TaskSelectInput, options?: any): AxiosPromise<CreateOneTask201Response>;
    /**
     * Group by Task
     * @param {TaskGroupByInput} select
     * @param {TaskWhereInput} [filter]
     * @param {Array<TaskOrderByWithAggregationInput>} [orderBy]
     * @param {Array<TaskScalarFieldEnum>} [groupBy]
     * @param {TaskScalarWhereWithAggregatesInput} [having]
     * @param {number} [skip]
     * @param {number} [take]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    groupByTask(select: TaskGroupByInput, filter?: TaskWhereInput, orderBy?: Array<TaskOrderByWithAggregationInput>, groupBy?: Array<TaskScalarFieldEnum>, having?: TaskScalarWhereWithAggregatesInput, skip?: number, take?: number, options?: any): AxiosPromise<GroupByTask200Response>;
    /**
     * Update multiple Task records
     * @param {TaskUpdateManyInput} taskUpdateManyInput
     * @param {TaskWhereInput} [filter]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateTask(taskUpdateManyInput: TaskUpdateManyInput, filter?: TaskWhereInput, options?: any): AxiosPromise<CreateManyTask201Response>;
    /**
     * Update one Task record by id
     * @param {string} value
     * @param {TaskUpdateInput} taskUpdateInput
     * @param {TaskSelectInput} [select]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateTaskById(value: string, taskUpdateInput: TaskUpdateInput, select?: TaskSelectInput, options?: any): AxiosPromise<CreateOneTask201Response>;
};
/**
 * TaskApi - object-oriented interface
 * @export
 * @class TaskApi
 * @extends {BaseAPI}
 */
export declare class TaskApi extends BaseAPI {
    /**
     * Aggregate by Task
     * @param {TaskAggregateInput} select
     * @param {TaskWhereInput} [filter]
     * @param {Array<TaskOrderByWithRelationInput>} [orderBy]
     * @param {number} [skip]
     * @param {number} [take]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TaskApi
     */
    aggregateByTask(select: TaskAggregateInput, filter?: TaskWhereInput, orderBy?: Array<TaskOrderByWithRelationInput>, skip?: number, take?: number, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<AggregateByTask200Response, any>>;
    /**
     * Create multiple Task records
     * @param {Array<TaskCreateManyInput>} taskCreateManyInput
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TaskApi
     */
    createManyTask(taskCreateManyInput: Array<TaskCreateManyInput>, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<CreateManyTask201Response, any>>;
    /**
     * Create one Task record
     * @param {TaskCreateInput} taskCreateInput
     * @param {TaskSelectInput} [select]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TaskApi
     */
    createOneTask(taskCreateInput: TaskCreateInput, select?: TaskSelectInput, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<CreateOneTask201Response, any>>;
    /**
     * Delete multiple Task records
     * @param {TaskWhereInput} [filter]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TaskApi
     */
    deleteTask(filter?: TaskWhereInput, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<CreateManyTask201Response, any>>;
    /**
     * Delete one Task record by id
     * @param {string} value
     * @param {TaskSelectInput} [select]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TaskApi
     */
    deleteTaskById(value: string, select?: TaskSelectInput, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<CreateOneTask201Response, any>>;
    /**
     * Retrieve multiple Task records
     * @param {TaskSelectInput} [select]
     * @param {TaskWhereInput} [filter]
     * @param {Array<TaskOrderByWithRelationInput>} [orderBy]
     * @param {number} [skip]
     * @param {number} [take]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TaskApi
     */
    findTask(select?: TaskSelectInput, filter?: TaskWhereInput, orderBy?: Array<TaskOrderByWithRelationInput>, skip?: number, take?: number, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<FindTask200Response, any>>;
    /**
     * Find one Task record by id
     * @param {string} value
     * @param {TaskSelectInput} [select]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TaskApi
     */
    findTaskById(value: string, select?: TaskSelectInput, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<CreateOneTask201Response, any>>;
    /**
     * Group by Task
     * @param {TaskGroupByInput} select
     * @param {TaskWhereInput} [filter]
     * @param {Array<TaskOrderByWithAggregationInput>} [orderBy]
     * @param {Array<TaskScalarFieldEnum>} [groupBy]
     * @param {TaskScalarWhereWithAggregatesInput} [having]
     * @param {number} [skip]
     * @param {number} [take]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TaskApi
     */
    groupByTask(select: TaskGroupByInput, filter?: TaskWhereInput, orderBy?: Array<TaskOrderByWithAggregationInput>, groupBy?: Array<TaskScalarFieldEnum>, having?: TaskScalarWhereWithAggregatesInput, skip?: number, take?: number, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<GroupByTask200Response, any>>;
    /**
     * Update multiple Task records
     * @param {TaskUpdateManyInput} taskUpdateManyInput
     * @param {TaskWhereInput} [filter]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TaskApi
     */
    updateTask(taskUpdateManyInput: TaskUpdateManyInput, filter?: TaskWhereInput, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<CreateManyTask201Response, any>>;
    /**
     * Update one Task record by id
     * @param {string} value
     * @param {TaskUpdateInput} taskUpdateInput
     * @param {TaskSelectInput} [select]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TaskApi
     */
    updateTaskById(value: string, taskUpdateInput: TaskUpdateInput, select?: TaskSelectInput, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<CreateOneTask201Response, any>>;
}
export declare const TaskApiService: TaskApi;
