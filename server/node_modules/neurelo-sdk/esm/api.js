/* tslint:disable */
/* eslint-disable */
/**
 * Neurelo API Spec
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (g && (g = 0, op[0] && (_ = 0)), _) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
import { neureloConfig } from './configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
// @ts-ignore
import { BASE_PATH, BaseAPI, operationServerMap, globalAxios } from './base';
/**
 *
 * @export
 * @enum {string}
 */
export var QueryMode = {
    Default: 'default',
    Insensitive: 'insensitive'
};
/**
 *
 * @export
 * @enum {string}
 */
export var SortOrder = {
    Asc: 'asc',
    Desc: 'desc'
};
export var TaskAggregateInputCountEnum = {
    All: '_all',
    Id: 'id',
    Name: 'name'
};
export var TaskAggregateInputMaxEnum = {
    Id: 'id',
    Name: 'name'
};
export var TaskAggregateInputMinEnum = {
    Id: 'id',
    Name: 'name'
};
export var TaskGroupByInputCountEnum = {
    All: '_all',
    Id: 'id',
    Name: 'name'
};
export var TaskGroupByInputMaxEnum = {
    Id: 'id',
    Name: 'name'
};
export var TaskGroupByInputMinEnum = {
    Id: 'id',
    Name: 'name'
};
/**
 *
 * @export
 * @enum {string}
 */
export var TaskScalarFieldEnum = {
    Id: 'id',
    Name: 'name'
};
/**
 * TaskApi - axios parameter creator
 * @export
 */
export var TaskApiAxiosParamCreator = function (configuration) {
    var _this = this;
    return {
        /**
         * Aggregate by Task
         * @param {TaskAggregateInput} select
         * @param {TaskWhereInput} [filter]
         * @param {Array<TaskOrderByWithRelationInput>} [orderBy]
         * @param {number} [skip]
         * @param {number} [take]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        aggregateByTask: function (select, filter, orderBy, skip, take, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'select' is not null or undefined
                            assertParamExists('aggregateByTask', 'select', select);
                            localVarPath = "/rest/Task/__aggregate";
                            localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication ApiKey required
                            return [4 /*yield*/, setApiKeyToObject(localVarHeaderParameter, "X-API-KEY", configuration)];
                        case 1:
                            // authentication ApiKey required
                            _a.sent();
                            if (select !== undefined) {
                                localVarQueryParameter['select'] = select;
                            }
                            if (filter !== undefined) {
                                localVarQueryParameter['filter'] = filter;
                            }
                            if (orderBy) {
                                localVarQueryParameter['order_by'] = orderBy;
                            }
                            if (skip !== undefined) {
                                localVarQueryParameter['skip'] = skip;
                            }
                            if (take !== undefined) {
                                localVarQueryParameter['take'] = take;
                            }
                            setSearchParams(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: toPathString(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * Create multiple Task records
         * @param {Array<TaskCreateManyInput>} taskCreateManyInput
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createManyTask: function (taskCreateManyInput, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'taskCreateManyInput' is not null or undefined
                            assertParamExists('createManyTask', 'taskCreateManyInput', taskCreateManyInput);
                            localVarPath = "/rest/Task";
                            localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication ApiKey required
                            return [4 /*yield*/, setApiKeyToObject(localVarHeaderParameter, "X-API-KEY", configuration)];
                        case 1:
                            // authentication ApiKey required
                            _a.sent();
                            localVarHeaderParameter['Content-Type'] = 'application/json';
                            setSearchParams(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            localVarRequestOptions.data = serializeDataIfNeeded(taskCreateManyInput, localVarRequestOptions, configuration);
                            return [2 /*return*/, {
                                    url: toPathString(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * Create one Task record
         * @param {TaskCreateInput} taskCreateInput
         * @param {TaskSelectInput} [select]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createOneTask: function (taskCreateInput, select, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'taskCreateInput' is not null or undefined
                            assertParamExists('createOneTask', 'taskCreateInput', taskCreateInput);
                            localVarPath = "/rest/Task/__one";
                            localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication ApiKey required
                            return [4 /*yield*/, setApiKeyToObject(localVarHeaderParameter, "X-API-KEY", configuration)];
                        case 1:
                            // authentication ApiKey required
                            _a.sent();
                            if (select !== undefined) {
                                localVarQueryParameter['select'] = select;
                            }
                            localVarHeaderParameter['Content-Type'] = 'application/json';
                            setSearchParams(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            localVarRequestOptions.data = serializeDataIfNeeded(taskCreateInput, localVarRequestOptions, configuration);
                            return [2 /*return*/, {
                                    url: toPathString(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * Delete multiple Task records
         * @param {TaskWhereInput} [filter]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteTask: function (filter, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            localVarPath = "/rest/Task";
                            localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'DELETE' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication ApiKey required
                            return [4 /*yield*/, setApiKeyToObject(localVarHeaderParameter, "X-API-KEY", configuration)];
                        case 1:
                            // authentication ApiKey required
                            _a.sent();
                            if (filter !== undefined) {
                                localVarQueryParameter['filter'] = filter;
                            }
                            setSearchParams(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: toPathString(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * Delete one Task record by id
         * @param {string} value
         * @param {TaskSelectInput} [select]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteTaskById: function (value, select, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'value' is not null or undefined
                            assertParamExists('deleteTaskById', 'value', value);
                            localVarPath = "/rest/Task/{value}"
                                .replace("{".concat("value", "}"), String(value));
                            localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'DELETE' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication ApiKey required
                            return [4 /*yield*/, setApiKeyToObject(localVarHeaderParameter, "X-API-KEY", configuration)];
                        case 1:
                            // authentication ApiKey required
                            _a.sent();
                            if (select !== undefined) {
                                localVarQueryParameter['select'] = select;
                            }
                            setSearchParams(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: toPathString(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * Retrieve multiple Task records
         * @param {TaskSelectInput} [select]
         * @param {TaskWhereInput} [filter]
         * @param {Array<TaskOrderByWithRelationInput>} [orderBy]
         * @param {number} [skip]
         * @param {number} [take]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        findTask: function (select, filter, orderBy, skip, take, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            localVarPath = "/rest/Task";
                            localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication ApiKey required
                            return [4 /*yield*/, setApiKeyToObject(localVarHeaderParameter, "X-API-KEY", configuration)];
                        case 1:
                            // authentication ApiKey required
                            _a.sent();
                            if (select !== undefined) {
                                localVarQueryParameter['select'] = select;
                            }
                            if (filter !== undefined) {
                                localVarQueryParameter['filter'] = filter;
                            }
                            if (orderBy) {
                                localVarQueryParameter['order_by'] = orderBy;
                            }
                            if (skip !== undefined) {
                                localVarQueryParameter['skip'] = skip;
                            }
                            if (take !== undefined) {
                                localVarQueryParameter['take'] = take;
                            }
                            setSearchParams(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: toPathString(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * Find one Task record by id
         * @param {string} value
         * @param {TaskSelectInput} [select]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        findTaskById: function (value, select, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'value' is not null or undefined
                            assertParamExists('findTaskById', 'value', value);
                            localVarPath = "/rest/Task/{value}"
                                .replace("{".concat("value", "}"), String(value));
                            localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication ApiKey required
                            return [4 /*yield*/, setApiKeyToObject(localVarHeaderParameter, "X-API-KEY", configuration)];
                        case 1:
                            // authentication ApiKey required
                            _a.sent();
                            if (select !== undefined) {
                                localVarQueryParameter['select'] = select;
                            }
                            setSearchParams(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: toPathString(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * Group by Task
         * @param {TaskGroupByInput} select
         * @param {TaskWhereInput} [filter]
         * @param {Array<TaskOrderByWithAggregationInput>} [orderBy]
         * @param {Array<TaskScalarFieldEnum>} [groupBy]
         * @param {TaskScalarWhereWithAggregatesInput} [having]
         * @param {number} [skip]
         * @param {number} [take]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        groupByTask: function (select, filter, orderBy, groupBy, having, skip, take, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'select' is not null or undefined
                            assertParamExists('groupByTask', 'select', select);
                            localVarPath = "/rest/Task/__groupBy";
                            localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication ApiKey required
                            return [4 /*yield*/, setApiKeyToObject(localVarHeaderParameter, "X-API-KEY", configuration)];
                        case 1:
                            // authentication ApiKey required
                            _a.sent();
                            if (select !== undefined) {
                                localVarQueryParameter['select'] = select;
                            }
                            if (filter !== undefined) {
                                localVarQueryParameter['filter'] = filter;
                            }
                            if (orderBy) {
                                localVarQueryParameter['order_by'] = orderBy;
                            }
                            if (groupBy) {
                                localVarQueryParameter['group_by'] = groupBy;
                            }
                            if (having !== undefined) {
                                localVarQueryParameter['having'] = having;
                            }
                            if (skip !== undefined) {
                                localVarQueryParameter['skip'] = skip;
                            }
                            if (take !== undefined) {
                                localVarQueryParameter['take'] = take;
                            }
                            setSearchParams(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: toPathString(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * Update multiple Task records
         * @param {TaskUpdateManyInput} taskUpdateManyInput
         * @param {TaskWhereInput} [filter]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateTask: function (taskUpdateManyInput, filter, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'taskUpdateManyInput' is not null or undefined
                            assertParamExists('updateTask', 'taskUpdateManyInput', taskUpdateManyInput);
                            localVarPath = "/rest/Task";
                            localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'PATCH' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication ApiKey required
                            return [4 /*yield*/, setApiKeyToObject(localVarHeaderParameter, "X-API-KEY", configuration)];
                        case 1:
                            // authentication ApiKey required
                            _a.sent();
                            if (filter !== undefined) {
                                localVarQueryParameter['filter'] = filter;
                            }
                            localVarHeaderParameter['Content-Type'] = 'application/json';
                            setSearchParams(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            localVarRequestOptions.data = serializeDataIfNeeded(taskUpdateManyInput, localVarRequestOptions, configuration);
                            return [2 /*return*/, {
                                    url: toPathString(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * Update one Task record by id
         * @param {string} value
         * @param {TaskUpdateInput} taskUpdateInput
         * @param {TaskSelectInput} [select]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateTaskById: function (value, taskUpdateInput, select, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'value' is not null or undefined
                            assertParamExists('updateTaskById', 'value', value);
                            // verify required parameter 'taskUpdateInput' is not null or undefined
                            assertParamExists('updateTaskById', 'taskUpdateInput', taskUpdateInput);
                            localVarPath = "/rest/Task/{value}"
                                .replace("{".concat("value", "}"), String(value));
                            localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'PATCH' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication ApiKey required
                            return [4 /*yield*/, setApiKeyToObject(localVarHeaderParameter, "X-API-KEY", configuration)];
                        case 1:
                            // authentication ApiKey required
                            _a.sent();
                            if (select !== undefined) {
                                localVarQueryParameter['select'] = select;
                            }
                            localVarHeaderParameter['Content-Type'] = 'application/json';
                            setSearchParams(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            localVarRequestOptions.data = serializeDataIfNeeded(taskUpdateInput, localVarRequestOptions, configuration);
                            return [2 /*return*/, {
                                    url: toPathString(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
    };
};
/**
 * TaskApi - functional programming interface
 * @export
 */
export var TaskApiFp = function (configuration) {
    var localVarAxiosParamCreator = TaskApiAxiosParamCreator(configuration);
    return {
        /**
         * Aggregate by Task
         * @param {TaskAggregateInput} select
         * @param {TaskWhereInput} [filter]
         * @param {Array<TaskOrderByWithRelationInput>} [orderBy]
         * @param {number} [skip]
         * @param {number} [take]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        aggregateByTask: function (select, filter, orderBy, skip, take, options) {
            var _a, _b, _c;
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, index, operationBasePath;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.aggregateByTask(select, filter, orderBy, skip, take, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            index = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            operationBasePath = (_c = (_b = operationServerMap['TaskApi.aggregateByTask']) === null || _b === void 0 ? void 0 : _b[index]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         * Create multiple Task records
         * @param {Array<TaskCreateManyInput>} taskCreateManyInput
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createManyTask: function (taskCreateManyInput, options) {
            var _a, _b, _c;
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, index, operationBasePath;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.createManyTask(taskCreateManyInput, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            index = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            operationBasePath = (_c = (_b = operationServerMap['TaskApi.createManyTask']) === null || _b === void 0 ? void 0 : _b[index]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         * Create one Task record
         * @param {TaskCreateInput} taskCreateInput
         * @param {TaskSelectInput} [select]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createOneTask: function (taskCreateInput, select, options) {
            var _a, _b, _c;
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, index, operationBasePath;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.createOneTask(taskCreateInput, select, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            index = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            operationBasePath = (_c = (_b = operationServerMap['TaskApi.createOneTask']) === null || _b === void 0 ? void 0 : _b[index]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         * Delete multiple Task records
         * @param {TaskWhereInput} [filter]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteTask: function (filter, options) {
            var _a, _b, _c;
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, index, operationBasePath;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.deleteTask(filter, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            index = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            operationBasePath = (_c = (_b = operationServerMap['TaskApi.deleteTask']) === null || _b === void 0 ? void 0 : _b[index]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         * Delete one Task record by id
         * @param {string} value
         * @param {TaskSelectInput} [select]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteTaskById: function (value, select, options) {
            var _a, _b, _c;
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, index, operationBasePath;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.deleteTaskById(value, select, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            index = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            operationBasePath = (_c = (_b = operationServerMap['TaskApi.deleteTaskById']) === null || _b === void 0 ? void 0 : _b[index]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         * Retrieve multiple Task records
         * @param {TaskSelectInput} [select]
         * @param {TaskWhereInput} [filter]
         * @param {Array<TaskOrderByWithRelationInput>} [orderBy]
         * @param {number} [skip]
         * @param {number} [take]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        findTask: function (select, filter, orderBy, skip, take, options) {
            var _a, _b, _c;
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, index, operationBasePath;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.findTask(select, filter, orderBy, skip, take, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            index = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            operationBasePath = (_c = (_b = operationServerMap['TaskApi.findTask']) === null || _b === void 0 ? void 0 : _b[index]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         * Find one Task record by id
         * @param {string} value
         * @param {TaskSelectInput} [select]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        findTaskById: function (value, select, options) {
            var _a, _b, _c;
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, index, operationBasePath;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.findTaskById(value, select, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            index = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            operationBasePath = (_c = (_b = operationServerMap['TaskApi.findTaskById']) === null || _b === void 0 ? void 0 : _b[index]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         * Group by Task
         * @param {TaskGroupByInput} select
         * @param {TaskWhereInput} [filter]
         * @param {Array<TaskOrderByWithAggregationInput>} [orderBy]
         * @param {Array<TaskScalarFieldEnum>} [groupBy]
         * @param {TaskScalarWhereWithAggregatesInput} [having]
         * @param {number} [skip]
         * @param {number} [take]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        groupByTask: function (select, filter, orderBy, groupBy, having, skip, take, options) {
            var _a, _b, _c;
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, index, operationBasePath;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.groupByTask(select, filter, orderBy, groupBy, having, skip, take, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            index = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            operationBasePath = (_c = (_b = operationServerMap['TaskApi.groupByTask']) === null || _b === void 0 ? void 0 : _b[index]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         * Update multiple Task records
         * @param {TaskUpdateManyInput} taskUpdateManyInput
         * @param {TaskWhereInput} [filter]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateTask: function (taskUpdateManyInput, filter, options) {
            var _a, _b, _c;
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, index, operationBasePath;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.updateTask(taskUpdateManyInput, filter, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            index = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            operationBasePath = (_c = (_b = operationServerMap['TaskApi.updateTask']) === null || _b === void 0 ? void 0 : _b[index]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         * Update one Task record by id
         * @param {string} value
         * @param {TaskUpdateInput} taskUpdateInput
         * @param {TaskSelectInput} [select]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateTaskById: function (value, taskUpdateInput, select, options) {
            var _a, _b, _c;
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, index, operationBasePath;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.updateTaskById(value, taskUpdateInput, select, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            index = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            operationBasePath = (_c = (_b = operationServerMap['TaskApi.updateTaskById']) === null || _b === void 0 ? void 0 : _b[index]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath); }];
                    }
                });
            });
        },
    };
};
/**
 * TaskApi - factory interface
 * @export
 */
export var TaskApiFactory = function (configuration, basePath, axios) {
    var localVarFp = TaskApiFp(configuration);
    return {
        /**
         * Aggregate by Task
         * @param {TaskAggregateInput} select
         * @param {TaskWhereInput} [filter]
         * @param {Array<TaskOrderByWithRelationInput>} [orderBy]
         * @param {number} [skip]
         * @param {number} [take]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        aggregateByTask: function (select, filter, orderBy, skip, take, options) {
            return localVarFp.aggregateByTask(select, filter, orderBy, skip, take, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Create multiple Task records
         * @param {Array<TaskCreateManyInput>} taskCreateManyInput
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createManyTask: function (taskCreateManyInput, options) {
            return localVarFp.createManyTask(taskCreateManyInput, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Create one Task record
         * @param {TaskCreateInput} taskCreateInput
         * @param {TaskSelectInput} [select]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createOneTask: function (taskCreateInput, select, options) {
            return localVarFp.createOneTask(taskCreateInput, select, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Delete multiple Task records
         * @param {TaskWhereInput} [filter]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteTask: function (filter, options) {
            return localVarFp.deleteTask(filter, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Delete one Task record by id
         * @param {string} value
         * @param {TaskSelectInput} [select]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteTaskById: function (value, select, options) {
            return localVarFp.deleteTaskById(value, select, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Retrieve multiple Task records
         * @param {TaskSelectInput} [select]
         * @param {TaskWhereInput} [filter]
         * @param {Array<TaskOrderByWithRelationInput>} [orderBy]
         * @param {number} [skip]
         * @param {number} [take]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        findTask: function (select, filter, orderBy, skip, take, options) {
            return localVarFp.findTask(select, filter, orderBy, skip, take, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Find one Task record by id
         * @param {string} value
         * @param {TaskSelectInput} [select]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        findTaskById: function (value, select, options) {
            return localVarFp.findTaskById(value, select, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Group by Task
         * @param {TaskGroupByInput} select
         * @param {TaskWhereInput} [filter]
         * @param {Array<TaskOrderByWithAggregationInput>} [orderBy]
         * @param {Array<TaskScalarFieldEnum>} [groupBy]
         * @param {TaskScalarWhereWithAggregatesInput} [having]
         * @param {number} [skip]
         * @param {number} [take]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        groupByTask: function (select, filter, orderBy, groupBy, having, skip, take, options) {
            return localVarFp.groupByTask(select, filter, orderBy, groupBy, having, skip, take, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Update multiple Task records
         * @param {TaskUpdateManyInput} taskUpdateManyInput
         * @param {TaskWhereInput} [filter]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateTask: function (taskUpdateManyInput, filter, options) {
            return localVarFp.updateTask(taskUpdateManyInput, filter, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Update one Task record by id
         * @param {string} value
         * @param {TaskUpdateInput} taskUpdateInput
         * @param {TaskSelectInput} [select]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateTaskById: function (value, taskUpdateInput, select, options) {
            return localVarFp.updateTaskById(value, taskUpdateInput, select, options).then(function (request) { return request(axios, basePath); });
        },
    };
};
/**
 * TaskApi - object-oriented interface
 * @export
 * @class TaskApi
 * @extends {BaseAPI}
 */
var TaskApi = /** @class */ (function (_super) {
    __extends(TaskApi, _super);
    function TaskApi() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     * Aggregate by Task
     * @param {TaskAggregateInput} select
     * @param {TaskWhereInput} [filter]
     * @param {Array<TaskOrderByWithRelationInput>} [orderBy]
     * @param {number} [skip]
     * @param {number} [take]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TaskApi
     */
    TaskApi.prototype.aggregateByTask = function (select, filter, orderBy, skip, take, options) {
        var _this = this;
        return TaskApiFp(this.configuration).aggregateByTask(select, filter, orderBy, skip, take, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Create multiple Task records
     * @param {Array<TaskCreateManyInput>} taskCreateManyInput
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TaskApi
     */
    TaskApi.prototype.createManyTask = function (taskCreateManyInput, options) {
        var _this = this;
        return TaskApiFp(this.configuration).createManyTask(taskCreateManyInput, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Create one Task record
     * @param {TaskCreateInput} taskCreateInput
     * @param {TaskSelectInput} [select]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TaskApi
     */
    TaskApi.prototype.createOneTask = function (taskCreateInput, select, options) {
        var _this = this;
        return TaskApiFp(this.configuration).createOneTask(taskCreateInput, select, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Delete multiple Task records
     * @param {TaskWhereInput} [filter]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TaskApi
     */
    TaskApi.prototype.deleteTask = function (filter, options) {
        var _this = this;
        return TaskApiFp(this.configuration).deleteTask(filter, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Delete one Task record by id
     * @param {string} value
     * @param {TaskSelectInput} [select]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TaskApi
     */
    TaskApi.prototype.deleteTaskById = function (value, select, options) {
        var _this = this;
        return TaskApiFp(this.configuration).deleteTaskById(value, select, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Retrieve multiple Task records
     * @param {TaskSelectInput} [select]
     * @param {TaskWhereInput} [filter]
     * @param {Array<TaskOrderByWithRelationInput>} [orderBy]
     * @param {number} [skip]
     * @param {number} [take]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TaskApi
     */
    TaskApi.prototype.findTask = function (select, filter, orderBy, skip, take, options) {
        var _this = this;
        return TaskApiFp(this.configuration).findTask(select, filter, orderBy, skip, take, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Find one Task record by id
     * @param {string} value
     * @param {TaskSelectInput} [select]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TaskApi
     */
    TaskApi.prototype.findTaskById = function (value, select, options) {
        var _this = this;
        return TaskApiFp(this.configuration).findTaskById(value, select, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Group by Task
     * @param {TaskGroupByInput} select
     * @param {TaskWhereInput} [filter]
     * @param {Array<TaskOrderByWithAggregationInput>} [orderBy]
     * @param {Array<TaskScalarFieldEnum>} [groupBy]
     * @param {TaskScalarWhereWithAggregatesInput} [having]
     * @param {number} [skip]
     * @param {number} [take]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TaskApi
     */
    TaskApi.prototype.groupByTask = function (select, filter, orderBy, groupBy, having, skip, take, options) {
        var _this = this;
        return TaskApiFp(this.configuration).groupByTask(select, filter, orderBy, groupBy, having, skip, take, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Update multiple Task records
     * @param {TaskUpdateManyInput} taskUpdateManyInput
     * @param {TaskWhereInput} [filter]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TaskApi
     */
    TaskApi.prototype.updateTask = function (taskUpdateManyInput, filter, options) {
        var _this = this;
        return TaskApiFp(this.configuration).updateTask(taskUpdateManyInput, filter, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Update one Task record by id
     * @param {string} value
     * @param {TaskUpdateInput} taskUpdateInput
     * @param {TaskSelectInput} [select]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TaskApi
     */
    TaskApi.prototype.updateTaskById = function (value, taskUpdateInput, select, options) {
        var _this = this;
        return TaskApiFp(this.configuration).updateTaskById(value, taskUpdateInput, select, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    return TaskApi;
}(BaseAPI));
export { TaskApi };
export var TaskApiService = new TaskApi(neureloConfig);
